// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
		DMux8Way(in=load, sel=address[3..5],a=dmuxout0,b=dmuxout1,c=dmuxout2,d=dmuxout3,e=dmuxout4,f=dmuxout5,g=dmuxout6,h=dmuxout7);
		
		RAM8(in=in,load=dmuxout0, address=address[0..2] ,out=registerout0);
		RAM8(in=in,load=dmuxout1, address=address[0..2] ,out=registerout1);
		RAM8(in=in,load=dmuxout2, address=address[0..2] ,out=registerout2);
		RAM8(in=in,load=dmuxout3, address=address[0..2] ,out=registerout3);
		RAM8(in=in,load=dmuxout4, address=address[0..2] ,out=registerout4);
		RAM8(in=in,load=dmuxout5, address=address[0..2] ,out=registerout5);
		RAM8(in=in,load=dmuxout6, address=address[0..2] ,out=registerout6);
		RAM8(in=in,load=dmuxout7, address=address[0..2] ,out=registerout7);
		
		Mux8Way16(a=registerout0,b=registerout1,c=registerout2,d=registerout3,e=registerout4,f=registerout5,g=registerout6,h=registerout7, sel=address[3..5], out=out);

		
		
		
		



		
	
}